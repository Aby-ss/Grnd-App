import { open } from './operations/session';
import { execute, executeAsync } from './operations/execute';
export * from './types';
export { typeORMDriver } from './typeORM';
export declare const onInitialized: Promise<void>;
export declare const NitroSQLite: {
    native: import("./specs/NitroSQLite.nitro").NitroSQLite;
    onInitialized: Promise<void>;
    open: typeof open;
    transaction: (dbName: string, fn: (tx: import("./types").Transaction) => Promise<void> | void) => Promise<void>;
    execute: typeof execute;
    executeAsync: typeof executeAsync;
    close(dbName: string): void;
    drop(dbName: string, location?: string): void;
    attach(mainDbName: string, dbNameToAttach: string, alias: string, location?: string): void;
    detach(mainDbName: string, alias: string): void;
    executeBatch(dbName: string, commands: import("./types").BatchQueryCommand[]): import("./types").BatchQueryResult;
    executeBatchAsync(dbName: string, commands: import("./types").BatchQueryCommand[]): Promise<import("./types").BatchQueryResult>;
    loadFile(dbName: string, location: string): import("./types").FileLoadResult;
    loadFileAsync(dbName: string, location: string): Promise<import("./types").FileLoadResult>;
    __type?: string;
    name: string;
    toString(): string;
    equals(other: import("react-native-nitro-modules").HybridObject<{
        ios: "c++";
        android: "c++";
    }>): boolean;
    dispose(): void;
};
export { open } from './operations/session';
//# sourceMappingURL=index.d.ts.map