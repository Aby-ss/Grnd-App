"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  onInitialized: true,
  NitroSQLite: true,
  open: true,
  typeORMDriver: true
};
exports.onInitialized = exports.NitroSQLite = void 0;
Object.defineProperty(exports, "open", {
  enumerable: true,
  get: function () {
    return _session.open;
  }
});
Object.defineProperty(exports, "typeORMDriver", {
  enumerable: true,
  get: function () {
    return _typeORM.typeORMDriver;
  }
});
var _transaction = require("./operations/transaction.js");
var _nitro = require("./nitro.js");
var _session = require("./operations/session.js");
var _NativeNitroSQLiteOnLoad = _interopRequireDefault(require("./specs/NativeNitroSQLiteOnLoad"));
var _execute = require("./operations/execute.js");
var _types = require("./types.js");
Object.keys(_types).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _types[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _types[key];
    }
  });
});
var _typeORM = require("./typeORM.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const onInitialized = exports.onInitialized = new Promise(resolve => {
  _NativeNitroSQLiteOnLoad.default.onReactApplicationContextReady(resolve);
});
const NitroSQLite = exports.NitroSQLite = {
  ..._nitro.HybridNitroSQLite,
  native: _nitro.HybridNitroSQLite,
  onInitialized,
  // Overwrite native `open` function with session-based JS abstraction,
  // where the database name can be ommited once opened
  open: _session.open,
  // More JS abstractions, that perform type casting and validation.
  transaction: _transaction.transaction,
  execute: _execute.execute,
  executeAsync: _execute.executeAsync
};
//# sourceMappingURL=index.js.map